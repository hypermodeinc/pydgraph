# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import api_pb2 as api__pb2

GRPC_GENERATED_VERSION = '1.65.5'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.66.0'
SCHEDULED_RELEASE_DATE = 'August 6, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in api_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class DgraphStub(object):
    """Graph response.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Login = channel.unary_unary(
                '/api.Dgraph/Login',
                request_serializer=api__pb2.LoginRequest.SerializeToString,
                response_deserializer=api__pb2.Response.FromString,
                _registered_method=True)
        self.Query = channel.unary_unary(
                '/api.Dgraph/Query',
                request_serializer=api__pb2.Request.SerializeToString,
                response_deserializer=api__pb2.Response.FromString,
                _registered_method=True)
        self.Alter = channel.unary_unary(
                '/api.Dgraph/Alter',
                request_serializer=api__pb2.Operation.SerializeToString,
                response_deserializer=api__pb2.Payload.FromString,
                _registered_method=True)
        self.CommitOrAbort = channel.unary_unary(
                '/api.Dgraph/CommitOrAbort',
                request_serializer=api__pb2.TxnContext.SerializeToString,
                response_deserializer=api__pb2.TxnContext.FromString,
                _registered_method=True)
        self.CheckVersion = channel.unary_unary(
                '/api.Dgraph/CheckVersion',
                request_serializer=api__pb2.Check.SerializeToString,
                response_deserializer=api__pb2.Version.FromString,
                _registered_method=True)
        self.RunDQL = channel.unary_unary(
                '/api.Dgraph/RunDQL',
                request_serializer=api__pb2.RunDQLRequest.SerializeToString,
                response_deserializer=api__pb2.Response.FromString,
                _registered_method=True)
        self.AllocateIDs = channel.unary_unary(
                '/api.Dgraph/AllocateIDs',
                request_serializer=api__pb2.AllocateIDsRequest.SerializeToString,
                response_deserializer=api__pb2.AllocateIDsResponse.FromString,
                _registered_method=True)
        self.UpdateExtSnapshotStreamingState = channel.unary_unary(
                '/api.Dgraph/UpdateExtSnapshotStreamingState',
                request_serializer=api__pb2.UpdateExtSnapshotStreamingStateRequest.SerializeToString,
                response_deserializer=api__pb2.UpdateExtSnapshotStreamingStateResponse.FromString,
                _registered_method=True)
        self.StreamExtSnapshot = channel.stream_unary(
                '/api.Dgraph/StreamExtSnapshot',
                request_serializer=api__pb2.StreamExtSnapshotRequest.SerializeToString,
                response_deserializer=api__pb2.StreamExtSnapshotResponse.FromString,
                _registered_method=True)
        self.CreateNamespace = channel.unary_unary(
                '/api.Dgraph/CreateNamespace',
                request_serializer=api__pb2.CreateNamespaceRequest.SerializeToString,
                response_deserializer=api__pb2.CreateNamespaceResponse.FromString,
                _registered_method=True)
        self.DropNamespace = channel.unary_unary(
                '/api.Dgraph/DropNamespace',
                request_serializer=api__pb2.DropNamespaceRequest.SerializeToString,
                response_deserializer=api__pb2.DropNamespaceResponse.FromString,
                _registered_method=True)
        self.ListNamespaces = channel.unary_unary(
                '/api.Dgraph/ListNamespaces',
                request_serializer=api__pb2.ListNamespacesRequest.SerializeToString,
                response_deserializer=api__pb2.ListNamespacesResponse.FromString,
                _registered_method=True)


class DgraphServicer(object):
    """Graph response.
    """

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Query(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Alter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CommitOrAbort(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckVersion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunDQL(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AllocateIDs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateExtSnapshotStreamingState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamExtSnapshot(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateNamespace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DropNamespace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListNamespaces(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DgraphServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=api__pb2.LoginRequest.FromString,
                    response_serializer=api__pb2.Response.SerializeToString,
            ),
            'Query': grpc.unary_unary_rpc_method_handler(
                    servicer.Query,
                    request_deserializer=api__pb2.Request.FromString,
                    response_serializer=api__pb2.Response.SerializeToString,
            ),
            'Alter': grpc.unary_unary_rpc_method_handler(
                    servicer.Alter,
                    request_deserializer=api__pb2.Operation.FromString,
                    response_serializer=api__pb2.Payload.SerializeToString,
            ),
            'CommitOrAbort': grpc.unary_unary_rpc_method_handler(
                    servicer.CommitOrAbort,
                    request_deserializer=api__pb2.TxnContext.FromString,
                    response_serializer=api__pb2.TxnContext.SerializeToString,
            ),
            'CheckVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckVersion,
                    request_deserializer=api__pb2.Check.FromString,
                    response_serializer=api__pb2.Version.SerializeToString,
            ),
            'RunDQL': grpc.unary_unary_rpc_method_handler(
                    servicer.RunDQL,
                    request_deserializer=api__pb2.RunDQLRequest.FromString,
                    response_serializer=api__pb2.Response.SerializeToString,
            ),
            'AllocateIDs': grpc.unary_unary_rpc_method_handler(
                    servicer.AllocateIDs,
                    request_deserializer=api__pb2.AllocateIDsRequest.FromString,
                    response_serializer=api__pb2.AllocateIDsResponse.SerializeToString,
            ),
            'UpdateExtSnapshotStreamingState': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateExtSnapshotStreamingState,
                    request_deserializer=api__pb2.UpdateExtSnapshotStreamingStateRequest.FromString,
                    response_serializer=api__pb2.UpdateExtSnapshotStreamingStateResponse.SerializeToString,
            ),
            'StreamExtSnapshot': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamExtSnapshot,
                    request_deserializer=api__pb2.StreamExtSnapshotRequest.FromString,
                    response_serializer=api__pb2.StreamExtSnapshotResponse.SerializeToString,
            ),
            'CreateNamespace': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateNamespace,
                    request_deserializer=api__pb2.CreateNamespaceRequest.FromString,
                    response_serializer=api__pb2.CreateNamespaceResponse.SerializeToString,
            ),
            'DropNamespace': grpc.unary_unary_rpc_method_handler(
                    servicer.DropNamespace,
                    request_deserializer=api__pb2.DropNamespaceRequest.FromString,
                    response_serializer=api__pb2.DropNamespaceResponse.SerializeToString,
            ),
            'ListNamespaces': grpc.unary_unary_rpc_method_handler(
                    servicer.ListNamespaces,
                    request_deserializer=api__pb2.ListNamespacesRequest.FromString,
                    response_serializer=api__pb2.ListNamespacesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.Dgraph', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('api.Dgraph', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Dgraph(object):
    """Graph response.
    """

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Dgraph/Login',
            api__pb2.LoginRequest.SerializeToString,
            api__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Dgraph/Query',
            api__pb2.Request.SerializeToString,
            api__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Alter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Dgraph/Alter',
            api__pb2.Operation.SerializeToString,
            api__pb2.Payload.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CommitOrAbort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Dgraph/CommitOrAbort',
            api__pb2.TxnContext.SerializeToString,
            api__pb2.TxnContext.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Dgraph/CheckVersion',
            api__pb2.Check.SerializeToString,
            api__pb2.Version.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RunDQL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Dgraph/RunDQL',
            api__pb2.RunDQLRequest.SerializeToString,
            api__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AllocateIDs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Dgraph/AllocateIDs',
            api__pb2.AllocateIDsRequest.SerializeToString,
            api__pb2.AllocateIDsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateExtSnapshotStreamingState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Dgraph/UpdateExtSnapshotStreamingState',
            api__pb2.UpdateExtSnapshotStreamingStateRequest.SerializeToString,
            api__pb2.UpdateExtSnapshotStreamingStateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamExtSnapshot(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/api.Dgraph/StreamExtSnapshot',
            api__pb2.StreamExtSnapshotRequest.SerializeToString,
            api__pb2.StreamExtSnapshotResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateNamespace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Dgraph/CreateNamespace',
            api__pb2.CreateNamespaceRequest.SerializeToString,
            api__pb2.CreateNamespaceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DropNamespace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Dgraph/DropNamespace',
            api__pb2.DropNamespaceRequest.SerializeToString,
            api__pb2.DropNamespaceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListNamespaces(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.Dgraph/ListNamespaces',
            api__pb2.ListNamespacesRequest.SerializeToString,
            api__pb2.ListNamespacesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
